

name: Publish Python Package
on:
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI?'
        required: true
        type: boolean
        default: false
      create_release:
        description: 'Create GitHub Release?'
        required: true
        type: boolean
        default: false
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/navmcp
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Fetch all tags
        run: git fetch --tags
      - name: Read version from _version.py
        id: get_version
        run: |
          VERSION=$(python -c "import navmcp._version; print(navmcp._version.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check if tag exists and bump version if needed
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            # Tag exists, bump version
            OLD_VERSION=${{ steps.get_version.outputs.version }}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
            PATCH=$((PATCH+1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "Bumping version to $NEW_VERSION"
            echo "__version__ = \"$NEW_VERSION\"" > navmcp/_version.py
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add navmcp/_version.py
            git commit -m "Bump version to $NEW_VERSION"
            git push origin HEAD:${GITHUB_REF}
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi
      - name: Set release name
        id: release_name
        run: |
          echo "release_name=navmcp-${{ steps.check_tag.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build

      - name: List dist directory contents
        run: ls -l dist || echo "dist directory not found"
        
      - name: Publish to PyPI (trusted publisher)
        if: ${{ github.event.inputs.publish_to_pypi == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        # with:
          # No username/password/token needed!
          # Optionally specify repository-url for TestPyPI
          # repository-url: https://test.pypi.org/legacy/

      - name: Create GitHub Release (optional)
        if: ${{ github.event.inputs.create_release == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.check_tag.outputs.tag }}
          release_name: ${{ steps.release_name.outputs.release_name }}
          draft: false
          prerelease: false
      - name: Upload wheel files to release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.whl
          asset_name: wheel_files.whl
          asset_content_type: application/octet-stream
      - name: Upload tar.gz files to release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.tar.gz
          asset_name: source_files.tar.gz
          asset_content_type: application/gzip
